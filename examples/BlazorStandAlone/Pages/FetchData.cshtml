@page "/fetchdata"
@inject HttpClient Http
@*@inherits RealmComponent<AppState>*@


<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<RealmStateContainer TState="AppState">
    <ComponentTemplate Context="store">
        @{
            AppState State = store.GetState();
            Action<IRealmAction> Dispatch = store.Dispatch;

            Action Load = () => Dispatch(new Operations.WeatherForecasts.Fetch(store, Http));
            Action Clear = () => Dispatch(new Actions.WeatherForecasts.Clear());
        }
        <button onclick="@Load">Load Data</button><br />
        <button onclick="@Clear">Clear Data</button><br />
        @if (State.Loading)
        {
            <p><em>Loading...</em></p>
        }
        else if (State.WeatherForecasts != null && State.WeatherForecasts.Count() > 0)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in State.WeatherForecasts)
                    {
                        <tr>
                            <td>@forecast.Date.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                        </tr>
                    }
                </tbody>
            </table>

        }
    </ComponentTemplate>
</RealmStateContainer>

@*<button onclick="@LoadData">Load Data</button><br />
    <button onclick="@ClearData">Clear Data</button><br />
    @if (State.Loading)
    {
        <p><em>Loading...</em></p>
    }
    else if(State.WeatherForecasts != null && State.WeatherForecasts.Count() > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in State.WeatherForecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>

    }*@

@functions {

    //void LoadData(Action<IRealmAction> Dispatch) => Dispatch(new Operations.WeatherForecasts.Fetch(Store, Http));
    //{
    //    Dispatch(new Operations.WeatherForecasts.Fetch(Store, Http));
    //}

    //void ClearData()
    //{
    //    Dispatch(new Actions.WeatherForecasts.Clear());
    //}
}

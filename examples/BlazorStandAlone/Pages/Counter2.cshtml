@page "/counter2"
@* 1. Inject Store<AppState> from services *@
@inject Store<AppState> store
@* 2. Implement IDisposable *@
@implements IDisposable
@inject IUriHelper uriHelper

<h1>Counter</h1>

<p>Current count: @State.Count</p>

Change By: <input type="text" name="IncementAmoung" bind="@ChangeAmount" /><br />

<button class="btn btn-primary" onclick="@IncrementCount">Increment</button><br />
<button class="btn btn-primary" onclick="@DecrementCount">Decrement</button><br />

<div>
    <p>Is Available: @IsAvailable</p>
    <p>Last Message: @LastMessage</p>
</div>


@functions {
    private bool IsAvailable => ReduxDevToolsInterop.IsAvailable();
    private string LastMessage = "";


    private int ChangeAmount { get; set; } = 1;

    // 3. Handlers for Store and State from injected services
    private Store<AppState> Store => store;
    private AppState State => Store.State;

    void IncrementCount()
    {
        Store.Dispatch(new Actions.IncrementByValue(ChangeAmount));
    }

    void DecrementCount()
    {
        Store.Dispatch(new Actions.DecrementByValue(ChangeAmount));
    }

    protected override void OnInit()
    {
        // 4. Register handler for Realm Store Change event
        Store.Change += OnChangeHandler;

        ReduxDevToolsInterop.Connect();
        ReduxDevToolsInterop.Init(State);
        ReduxDevToolsInterop.MessageReceived += (s, e) =>
        {
            LastMessage = JsonUtil.Serialize(e.Message);
            //LastMessage = e;
            StateHasChanged();
        };
        ReduxDevToolsInterop.Subscribe();

        ReduxDevToolsInterop.Send(new Actions.IncrementByValue(100),
            new AppState()
            {
                Loading = State.Loading,
                Count = State.Count + 100,
                WeatherForecasts = State.WeatherForecasts
            });
        ReduxDevToolsInterop.Send(new Actions.IncrementByValue(50),
            new AppState()
            {
                Loading = State.Loading,
                Count = State.Count + 50,
                WeatherForecasts = State.WeatherForecasts
            });


    }

    protected void OnChangeHandler(object sender, EventArgs e)
    {
        // 5. Inform Blazor that the state has changed
        // due to changes in the Realm Store.
        StateHasChanged();
    }

    public virtual void Dispose()
    {
        // 6. Remove event handlers when component is disposed
        Store.Change -= OnChangeHandler;
    }
}
